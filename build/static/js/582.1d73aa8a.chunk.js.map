{"version":3,"file":"static/js/582.1d73aa8a.chunk.js","mappings":"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","sources":["pages/inspirations/Inspirations.tsx","../node_modules/@chakra-ui/react/dist/esm/card/card-header.mjs"],"sourcesContent":["import {\r\n  Box,\r\n  Card,\r\n  Image,\r\n  Stack,\r\n  CardBody,\r\n  CardFooter,\r\n  Button,\r\n  Heading,\r\n  Text,\r\n  SimpleGrid,\r\n  CardHeader,\r\n} from \"@chakra-ui/react\";\r\nimport \"./Inspirations.css\";\r\nimport ResponsivePagination from \"react-responsive-pagination\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Inspirations = () => {\r\n  const [data, setData] = useState([]);\r\n  const pageSize = 6;\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n  const [totalData, setTotalData] = useState([]);\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const totalPages = useMemo(() => Math.ceil(totalData.length / pageSize), [totalData]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Handler to update the state with the new window width\r\n    const handleResize = () => {\r\n      setWidth(window.innerWidth);\r\n    };\r\n\r\n    // Add resize event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Call the handler immediately to set initial width\r\n    handleResize();\r\n\r\n    // Cleanup by removing the event listener on component unmount\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch(`${process.env.REACT_APP_API_URL}/inspirations`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setTotalData(data);\r\n        setData(\r\n          data.slice(\r\n            (currentPage - 1) * pageSize,\r\n            currentPage * pageSize\r\n          )\r\n        );\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    setData(\r\n      totalData.slice(\r\n        (currentPage - 1) * pageSize,\r\n        currentPage * pageSize\r\n      )\r\n    );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentPage]);\r\n\r\n  const handlePageChange = (page: number) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const inspirationList = () => {\r\n    return data.map((x: any) => {\r\n      return (\r\n        <Card\r\n          key={x.id}\r\n          variant=\"unstyled\"\r\n          gap=\"10px\"\r\n          className=\"card-box\"\r\n        >\r\n          <CardHeader display=\"flex\" justifyContent=\"start\">\r\n            <Heading className=\"title card-title\" size=\"md\">\r\n              {x.title}\r\n            </Heading>\r\n          </CardHeader>\r\n          <Box className=\"card-container\">\r\n            <Image\r\n              // className=\"card-thumbnail\"\r\n              objectFit=\"cover\"\r\n              src={x.thumbnail}\r\n              alt=\"post\"\r\n              onClick={() => navigate(`/inspirations/${x.path}`)}\r\n            />\r\n            <Stack className=\"card-content\" padding=\"10px\">\r\n              <CardBody\r\n                onClick={() => navigate(`/inspirations/${x.path}`)}\r\n              >\r\n                <Text className=\"card-desc\" fontSize={{ sm:\"12px\", md: \"14px\", lg: \"16px\" }} py=\"2\" color=\"white\">{x.description}</Text>\r\n              </CardBody>\r\n              <CardFooter alignSelf=\"flex-end\">\r\n                <Button\r\n                  variant=\"link\"\r\n                  color=\"white\"\r\n                  onClick={() => navigate(`/inspirations/${x.path}`)}\r\n                >\r\n                  READ MORE\r\n                </Button>\r\n              </CardFooter>\r\n            </Stack>\r\n          </Box>\r\n        </Card>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\">\r\n      <Heading className=\"title\" size=\"lg\" alignSelf=\"center\" marginTop=\"30px\">INSPIRATION</Heading>\r\n      <Box maxWidth=\"8xl\" margin={width < 992 ? \"40px 10px\" : \"40px 80px\"} alignSelf=\"center\">\r\n        <SimpleGrid className=\"card-grid\" rowGap=\"50px\" columnGap=\"80px\" columns={2}>\r\n          {inspirationList()}\r\n        </SimpleGrid>\r\n        <ResponsivePagination\r\n          total={totalPages}\r\n          current={currentPage}\r\n          onPageChange={(page) => handlePageChange(page)}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Inspirations;\r\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { useCardStyles } from './card-context.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst CardHeader = forwardRef(\n  function CardHeader2(props, ref) {\n    const { className, ...rest } = props;\n    const styles = useCardStyles();\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ref,\n        className: cx(\"chakra-card__header\", className),\n        __css: styles.header,\n        ...rest\n      }\n    );\n  }\n);\n\nexport { CardHeader };\n"],"names":["Inspirations","data","setData","useState","currentPage","setCurrentPage","totalData","setTotalData","width","setWidth","window","innerWidth","totalPages","useMemo","Math","ceil","length","navigate","useNavigate","useEffect","handleResize","addEventListener","removeEventListener","fetch","then","response","json","slice","scrollTo","top","behavior","_jsxs","Box","display","flexDirection","children","_jsx","Heading","className","size","alignSelf","marginTop","maxWidth","margin","SimpleGrid","rowGap","columnGap","columns","map","x","Card","variant","gap","CardHeader","justifyContent","title","Image","objectFit","src","thumbnail","alt","onClick","path","Stack","padding","CardBody","Text","fontSize","sm","md","lg","py","color","description","CardFooter","Button","id","ResponsivePagination","total","current","onPageChange","page","handlePageChange","forwardRef","props","ref","rest","styles","useCardStyles","jsx","chakra","div","cx","__css","header"],"sourceRoot":""}